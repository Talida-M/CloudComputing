version: '3.8'

services:

  syslog-ng:
    image: balabit/syslog-ng:latest
    container_name: syslog-ng
    networks:
      - my-network
    ports:
      - "514:514/udp"
      - "514:514/tcp"
    volumes:
      - ./syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf
      - ./logs:/var/log


  postgres:
    image: postgres
    container_name: postgresTAM
    networks:
      - my-network
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: my-secret-pw
    volumes:
      - ./OrderMicroservices/data:/var/lib/postgresql/data

  userdb:
    image: postgres
    container_name: user_db_TAM
    networks:
      - my-network
#    ports:
#      - "5433:5432"
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: my-secret-pw
    volumes:
      - ./UserMicroservices/data:/var/lib/postgresql/data

  reviewdb:
    image: postgres
    container_name: review_db_TAM
    networks:
      - my-network
#    ports:
#      - "5434:5432"
    environment:
      POSTGRES_DB: reviewdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: my-secret-pw
    volumes:
      - ./ReviewMicroservices/data:/var/lib/postgresql/data

  bookdb:
    image: postgres
    container_name: book_db_TAM
    networks:
      - my-network
    #    ports:
    #      - "5435:5432"
    environment:
      POSTGRES_DB: bookdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: my-secret-pw
    volumes:
      - ./BookMicroservices/data:/var/lib/postgresql/data
#  redis:
#    image: redis
#    container_name: redis
#    networks:
#      - my-network
#    ports:
#      - "6379:6379"
#    command: --bind 0.0.0.0

  rabbitmq:
    image: rabbitmq
    container_name: rabbitmqTAM
    networks:
      - my-network
    ports:
      - "5672:5672"

  user-microservices:
    build:
      context: ./UserMicroservices
      dockerfile: Dockerfile
    container_name: tam-user-app
    networks:
      - my-network
    ports:
      - "5002:8000"
    environment:
      DB_HOST: userdb
      DB_NAME: userdb
      DB_USERNAME: postgres
      DB_PASSWORD: my-secret-pw
    depends_on:
      - userdb #nume serviciu
    restart: always

  review-microservices:
    build:
      context: ./ReviewMicroservices
      dockerfile: Dockerfile
    container_name: tam-review-app
    networks:
      - my-network
    ports:
      - "5003:8000"
    environment:
      DB_HOST: reviewdb
      DB_NAME: reviewdb
      DB_USERNAME: postgres
      DB_PASSWORD: my-secret-pw
#      REDIS_HOST: redis
#      REDIS_DATABASE: "0"
      RABBITMQ_HOST: rabbitmq
      SYSLOG_HOST: syslog-ng
    depends_on:
      - reviewdb
#      - postgres
#      - redis
      - rabbitmq
      - syslog-ng
      - prometheus
    restart: always

  book-microservices:
    build:
      context: ./BookMicroservices
      dockerfile: Dockerfile
    container_name: tam-book-app
    networks:
      - my-network
    ports:
      - "5004:8000"
    environment:

      DB_HOST: bookdb
      DB_NAME: bookdb
      DB_USERNAME: postgres
      DB_PASSWORD: my-secret-pw
#      REDIS_HOST: redis
#      REDIS_DATABASE: "0"
      RABBITMQ_HOST: rabbitmq
      SYSLOG_HOST: syslog-ng
#      PYTHONUNBUFFERED: 1
    depends_on:
      - bookdb
#      - redis
      - syslog-ng
      - rabbitmq
      - prometheus
    restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      - my-network
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  user-interface:
    build:
      context: ./UserInterface
      dockerfile: Dockerfile
    container_name: tam-user-interface-app
    networks:
      - my-network
    ports:
      - "5005:8000"
#    environment:
#      DB_HOST: postgres
#      DB_NAME: db
#      DB_USERNAME: postgres
#      DB_PASSWORD: my-secret-pw
#    depends_on:
#      - postgres
    restart: always

  order-microservice-consumer:
    build:
      context: ./OrderMicroservices/Consumer
      dockerfile: Dockerfile
    container_name: tam-order-app-consumer
    networks:
      - my-network
    environment:
      DB_HOST: postgres
      DB_NAME: db
      DB_USERNAME: postgres
      DB_PASSWORD: my-secret-pw
      #      REDIS_HOST: redis
      #      REDIS_DATABASE: "0"
      RABBITMQ_HOST: rabbitmq
    depends_on:
      - postgres
      #      - redis
      - rabbitmq
    restart: always

  order-microservice-api:
    build:
      context: ./OrderMicroservices/OrderApi
      dockerfile: Dockerfile
    container_name: tam-order-app-producer
    networks:
      - my-network
    ports:
      - "5006:8000"
    environment:
      DB_HOST: postgres
      DB_NAME: db
      DB_USERNAME: postgres
      DB_PASSWORD: my-secret-pw
#      REDIS_HOST: redis
#      REDIS_DATABASE: "0"
      RABBITMQ_HOST: rabbitmq
      SYSLOG_HOST: syslog-ng
    depends_on:
      - postgres
#      - redis
      - rabbitmq
      - syslog-ng
      - prometheus
    restart: always


networks:
  my-network:
    driver: bridge
